// ===== CHEICK MOHAMED SCHOOL BACKEND SERVER =====

const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const csv = require('csv-parser');
const multer = require('multer');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const sqlite3 = require('sqlite3').verbose();

// ===== SERVER CONFIGURATION =====
const app = express();
const PORT = process.env.PORT || 3000;
const JWT_SECRET = process.env.JWT_SECRET || 'cheick_mohamed_school_secret_key_2024';

// Determine environment and database path
const isReplit = process.env.REPL_ID !== undefined;
const DB_PATH = isReplit ? './database/school.db' : './database/school.db';

// Log environment info
console.log(`🌍 Environment: ${isReplit ? 'Replit' : 'Local'}`);
console.log(`📁 Database Path: ${DB_PATH}`);

// ===== MIDDLEWARE =====
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '..')));

// File upload configuration
const upload = multer({
    dest: 'uploads/',
    fileFilter: (req, file, cb) => {
        if (file.mimetype === 'text/csv') {
            cb(null, true);
        } else {
            cb(new Error('Only CSV files are allowed'), false);
        }
    }
});

// ===== DATABASE INITIALIZATION =====
let db;

function initializeDatabase() {
    // Create database directory if it doesn't exist
    const dbDir = path.dirname(DB_PATH);
    if (!fs.existsSync(dbDir)) {
        fs.mkdirSync(dbDir, { recursive: true });
    }

    db = new sqlite3.Database(DB_PATH, (err) => {
        if (err) {
            console.error('Error opening database:', err);
        } else {
            console.log('Connected to the SQLite database.');
            createTables();
        }
    });
}

function createTables() {
    console.log('Creating database tables...');
    
    // Create tables synchronously to ensure proper order
    db.serialize(() => {
        // Institutions table
        db.run(`
            CREATE TABLE IF NOT EXISTS institutions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                reg_number TEXT,
                type TEXT,
                address TEXT,
                email TEXT,
                website TEXT,
                phone TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `, (err) => {
            if (err) console.error('Error creating institutions table:', err);
            else console.log('Institutions table created/verified');
        });
        
        // Users table
        db.run(`
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                role TEXT NOT NULL,
                name TEXT NOT NULL,
                email TEXT,
                institution_id INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (institution_id) REFERENCES institutions(id)
            )
        `, (err) => {
            if (err) console.error('Error creating users table:', err);
            else console.log('Users table created/verified');
        });
        
        // Check and add institution_id column to users table if it doesn't exist
        db.all("PRAGMA table_info(users)", (err, rows) => {
            if (err) {
                console.error('Error checking users table schema:', err);
                return;
            }
            
            // Check if institution_id column exists
            const hasInstitutionId = rows.some(row => row.name === 'institution_id');
            
            if (!hasInstitutionId) {
                console.log('Adding institution_id column to users table');
                db.run('ALTER TABLE users ADD COLUMN institution_id INTEGER REFERENCES institutions(id)', err => {
                    if (err) console.error('Error adding institution_id to users table:', err);
                    else console.log('institution_id column added to users table');
                });
            }
        });

        // Students table
        db.run(`
            CREATE TABLE IF NOT EXISTS students (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                department TEXT NOT NULL,
                class TEXT,
                email TEXT,
                phone TEXT,
                date_of_birth DATE,
                address TEXT,
                parent_id TEXT,
                status TEXT DEFAULT 'active',
                institution_id INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (institution_id) REFERENCES institutions(id)
            )
        `, (err) => {
            if (err) console.error('Error creating students table:', err);
            else console.log('Students table created/verified');
        });
        
        // Check and add institution_id column to students table if it doesn't exist
        db.all("PRAGMA table_info(students)", (err, rows) => {
            if (err) {
                console.error('Error checking students table schema:', err);
                return;
            }
            
            // Check if institution_id column exists
            const hasInstitutionId = rows.some(row => row.name === 'institution_id');
            
            if (!hasInstitutionId) {
                console.log('Adding institution_id column to students table');
                db.run('ALTER TABLE students ADD COLUMN institution_id INTEGER REFERENCES institutions(id)', err => {
                    if (err) console.error('Error adding institution_id to students table:', err);
                    else console.log('institution_id column added to students table');
                });
            }
        });

        // Teachers table
        db.run(`
            CREATE TABLE IF NOT EXISTS teachers (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                department TEXT NOT NULL,
                subject TEXT,
                email TEXT,
                phone TEXT,
                qualification TEXT,
                experience INTEGER,
                status TEXT DEFAULT 'active',
                institution_id INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (institution_id) REFERENCES institutions(id)
            )
        `, (err) => {
            if (err) console.error('Error creating teachers table:', err);
            else console.log('Teachers table created/verified');
        });
        
        // Check and add institution_id column to teachers table if it doesn't exist
        db.all("PRAGMA table_info(teachers)", (err, rows) => {
            if (err) {
                console.error('Error checking teachers table schema:', err);
                return;
            }
            
            // Check if institution_id column exists
            const hasInstitutionId = rows.some(row => row.name === 'institution_id');
            
            if (!hasInstitutionId) {
                console.log('Adding institution_id column to teachers table');
                db.run('ALTER TABLE teachers ADD COLUMN institution_id INTEGER REFERENCES institutions(id)', err => {
                    if (err) console.error('Error adding institution_id to teachers table:', err);
                    else console.log('institution_id column added to teachers table');
                });
            }
        });

        // Attendance table
        db.run(`
            CREATE TABLE IF NOT EXISTS attendance (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT NOT NULL,
                time TEXT NOT NULL,
                student_id TEXT NOT NULL,
                student_name TEXT NOT NULL,
                department TEXT NOT NULL,
                status TEXT DEFAULT 'present',
                face_recognition BOOLEAN DEFAULT true,
                institution_id INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (institution_id) REFERENCES institutions(id)
            )
        `, (err) => {
            if (err) console.error('Error creating attendance table:', err);
            else console.log('Attendance table created/verified');
        });
        
        // Check and add institution_id column to attendance table if it doesn't exist
        db.all("PRAGMA table_info(attendance)", (err, rows) => {
            if (err) {
                console.error('Error checking attendance table schema:', err);
                return;
            }
            
            // Check if institution_id column exists
            const hasInstitutionId = rows.some(row => row.name === 'institution_id');
            
            if (!hasInstitutionId) {
                console.log('Adding institution_id column to attendance table');
                db.run('ALTER TABLE attendance ADD COLUMN institution_id INTEGER REFERENCES institutions(id)', err => {
                    if (err) console.error('Error adding institution_id to attendance table:', err);
                    else console.log('institution_id column added to attendance table');
                });
            }
        });

        // Classes table
        db.run(`
            CREATE TABLE IF NOT EXISTS classes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                department TEXT NOT NULL,
                teacher_id TEXT,
                room TEXT,
                schedule TEXT,
                capacity INTEGER,
                status TEXT DEFAULT 'active',
                institution_id INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (institution_id) REFERENCES institutions(id)
            )
        `, (err) => {
            if (err) console.error('Error creating classes table:', err);
            else console.log('Classes table created/verified');
        });
        
        // Check and add institution_id column to classes table if it doesn't exist
        db.all("PRAGMA table_info(classes)", (err, rows) => {
            if (err) {
                console.error('Error checking classes table schema:', err);
                return;
            }
            
            // Check if institution_id column exists
            const hasInstitutionId = rows.some(row => row.name === 'institution_id');
            
            if (!hasInstitutionId) {
                console.log('Adding institution_id column to classes table');
                db.run('ALTER TABLE classes ADD COLUMN institution_id INTEGER REFERENCES institutions(id)', err => {
                    if (err) console.error('Error adding institution_id to classes table:', err);
                    else console.log('institution_id column added to classes table');
                });
            }
        });

        // Initialize default data after all tables are created
        setTimeout(() => {
            insertDefaultData();
        }, 2000);
    });
}
